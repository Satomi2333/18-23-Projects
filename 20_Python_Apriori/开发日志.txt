v0.0.1
	2020.5.17
		实现：
			函数：从快捷方式中获取目标
			          时间元组转为字符
			          获取文件的三个时间数据
			          遍历recent文件夹后，将非重复条目写入到数据库中
		待解决：
			target =“正在研究这是个什么玩意儿”，即名字中含有pid的或是含有ms相关的
v0.0.2
	2020.5.18
		实现：
			函数：通过pid来查找进程名以及目录
			          遍历所有pid（这个好慢啊）
			          （修改了一些规则（使用正则表达式）来防止文件名中带有空格的路径被误判断）
			          一个用来分割字符串中连续空格的子函数
			          一个船新的遍历pid函数（比walk快的当然是run啦）
			          通过pid来查找进程名以及目录及其父进程pid
			          主函数中已经可以处理部分带有pid的了（一口气写了很多，但是还没有仔细debug）
			          加入了60s一次的循环
v0.0.3
	2020.5.19
		已知错误：
			（小概率）在代码执行过程中，恰巧删除（移动）了recent内的文件
		实现：
			算法：Apriori
		待解决：
			函数：将数据处理成Apriori可用的样子（1.完成查询子函数 2.将返回结果进行简单处理（将长字符串化简来提高Apriori算法的效率））
			          按照需求来获取指定日期的数据（1.通过传入参数来生成日期并转化为格式化字符串 2.进行查询并将结果返回）
v0.0.4
	2020.5.20
		实现：
			函数：按照需求来获取指定日期的数据 --> 获取日期字符串（这样更结构化）
			          传入所需日期，将数据处理成Apriori可用的样子
			          数据清洗 -- 垃圾列表，垃圾判断，原数据清洗并返回清洗好的数据
			          顺便将数据进行了去重操作
			          重写了一个dataProcess，现在可以对数据进行编码了
			优化：数据处理时对数据进行编码，也就加速了Apriori和去重时的搜索
		小成功：
			frozenset({47}) --> frozenset({7}) conf: 1.0
			frozenset({7}) --> frozenset({47}) conf: 0.75
			frozenset({7}) --> frozenset({8}) conf: 0.75
			frozenset({8}) --> frozenset({7}) conf: 1.0
			
			values[47]
			('3.x', 'X:\\Work_Py\\3.x')
			
			values[7]
			('DataMining', 'X:\\Work_Py\\DataMining')
			
			values[8]
			('开发日志.txt', 'X:\\Work_Py\\DataMining\\开发日志.txt')
v0.0.4a
	2020.5.21
		实现：
			思路：如何规范化地搞出详细时间分割
			          还搞了很多的常量
			注释：我开始写复杂函数的帮助注释了！！！
		待实现：
			函数：更详细的时间分割（按某日早中午之类的）
v0.1.0
	2020.5.22
		实现：
			函数：更详细的时间分割
			          （之前的遍历pid的函数还没有用上，只需添加一个进程监控列表（usefulProcess，原理和那个垃圾列表相似）就可以用上这个函数来获取更多的进程运行信息）

			似乎已经可以用了......

		待实现:
			函数：更准确的频繁项集相关参数，虽然已经可以进行简单的单应用推荐，以及关联应用推荐，但是还需要调整参数
			          将结果显示出来（用文字）
			          如何将遍历pid的结果存入数据库（思路：将当前生成的结果以（字符串，set）存入文件中，下一次使用eval取出来，并做差值）
v0.1.1
	2020.5.23
		设想：
			算法：搞一个缓存技术来减小对数据库的访问，以提高速度
		实现：
			函数：将结果显示出来（用文字）包括显示频繁项集和关联规则
			          一个奇怪地想法，使用两次Apriori算法，计算频繁项集的频繁项集
		发现：
			特性：frozenset可以直接做为其他可迭代对象的构造函数的参数，之前的代码还憨憨地去遍历
			缺陷：Apriori算法中，如果出现了诸如[[0, 1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 9, ...., 37, 38]]这样的输入，因为仅有2个输入，而且两个集合交集也很小，于是像是1，2这两个元素就会用来生成频繁超集，也就是和3~38进行组合，需计算至少35！个组合，直接指数爆炸
v1.0.0
	2020.5.24
		实现：可以进行简单的预测了，参数也调好了（算是吧），目前的预测项目有：最近最爱、最近晚间最爱、昨天打开过、一周前打开过，以及很多关联规则
		设想：下一个大版本是v2.0.0，会加入界面，那种悬浮在屏幕左上角的一个小透明窗口，有了UI的话Apriori的结果才算得上是有用的（）
		待实现：v0.1.0：将遍历的pid结果存入数据库
		             v0.1.1：缓存技术、Apriori也无法解决的时间复杂度问题（思路：因为大量计算会导致输出等待，就是黑屏卡住，所以可以给每个Apriori算法设定一个超时跳过）
		成果：
			（执行于2020-5-24）
			最近最爱：
			('FileRecv', 'L:\\Water\\Documents\\Tencent Files\\1106367305\\FileRecv')
			('DataMining', 'X:\\Work_Py\\DataMining')
			('开发日志.txt', 'X:\\Work_Py\\DataMining\\开发日志.txt')
			('LoR.exe', 'R:\\Riot Games\\LoR\\live\\Game\\LoR.exe')

			最近晚间最爱：
			('しゃしん', 'D:\\Desk.top\\しゃしん')
			('DataMining', 'X:\\Work_Py\\DataMining')

			昨天打开过：
			('数据挖掘', 'D:\\Desk.top\\テキストファイル\\其他\\数据挖掘')
			('しゃしん', 'D:\\Desk.top\\しゃしん')
			('LoR.exe', 'R:\\Riot Games\\LoR\\live\\Game\\LoR.exe')
			('开发日志.txt', 'X:\\Work_Py\\DataMining\\开发日志.txt')
			('DataMining', 'X:\\Work_Py\\DataMining')

			一周前曾打开过：
			('DataMining', 'X:\\Work_Py\\DataMining')

			打开某个（某些）文件后，有概率会打开的另一个（另一些）文件：
			1.0 : テキストファイル -> DataMining 
			1.0 : 财政统计19-20年度.xlsx -> DataMining 
			1.0 : 财政统计19-20年度.xlsx -> テキストファイル 
			1.0 : テキストファイル -> 财政统计19-20年度.xlsx 
			1.0 : 3.x -> DataMining 
			1.0 : テキストファイル -> 3.x 
			1.0 : 财政统计19-20年度.xlsx -> 3.x 
			1.0 : FileRecv -> DataMining 
			1.0 : FileRecv -> 开发日志.txt 
			1.0 : tgp_daemon.exe -> DataMining 
			1.0 : tgp_daemon.exe -> 开发日志.txt 
			1.0 : 开发日志.txt -> DataMining 
			1.0 : LoR.exe -> DataMining 
			1.0 : LoR.exe -> 开发日志.txt 
			1.0 : 数据挖掘 -> DataMining 
			1.0 : FileRecv -> DataMining 开发日志.txt 
			1.0 : 财政统计19-20年度.xlsx -> 3.x テキストファイル 
			1.0 : テキストファイル -> 3.x 财政统计19-20年度.xlsx 
			1.0 : 财政统计19-20年度.xlsx -> DataMining 3.x 
			1.0 : テキストファイル -> DataMining 3.x 
			1.0 : 财政统计19-20年度.xlsx -> DataMining テキストファイル 
			1.0 : テキストファイル -> DataMining 财政统计19-20年度.xlsx 
			1.0 : tgp_daemon.exe -> DataMining 开发日志.txt 
			1.0 : LoR.exe -> DataMining 开发日志.txt 
			1.0 : テキストファイル 财政统计19-20年度.xlsx -> DataMining 3.x 
			1.0 : 3.x 财政统计19-20年度.xlsx -> DataMining テキストファイル 
			1.0 : 3.x テキストファイル -> DataMining 财政统计19-20年度.xlsx 
			1.0 : DataMining 财政统计19-20年度.xlsx -> 3.x テキストファイル 
			1.0 : DataMining テキストファイル -> 3.x 财政统计19-20年度.xlsx 
			1.0 : 财政统计19-20年度.xlsx -> DataMining 3.x テキストファイル 
			1.0 : テキストファイル -> DataMining 3.x 财政统计19-20年度.xlsx 
			0.8571428571428571 : DataMining -> 开发日志.txt 
			0.75 : 3.x -> 开发日志.txt 
			0.75 : 数据挖掘 -> 3.x 
			0.75 : 3.x -> 数据挖掘 
			0.75 : 3.x -> テキストファイル 
			0.75 : 3.x -> 财政统计19-20年度.xlsx 
			0.75 : 数据挖掘 -> 开发日志.txt 
			0.75 : 3.x -> テキストファイル 财政统计19-20年度.xlsx 
			0.75 : 数据挖掘 -> DataMining 3.x 
			0.75 : 3.x -> DataMining 数据挖掘 
			0.75 : 3.x -> DataMining 开发日志.txt 
			0.75 : 3.x -> DataMining 财政统计19-20年度.xlsx 
			0.75 : 3.x -> DataMining テキストファイル 
			0.75 : 数据挖掘 -> DataMining 开发日志.txt 
			0.75 : DataMining 3.x -> テキストファイル 财政统计19-20年度.xlsx 
			0.75 : 3.x -> DataMining テキストファイル 财政统计19-20年度.xlsx 
v1.0.1
	2020-6-2
		修改：
			函数：现在会把recent文件夹中的已失效pid的文件移动到指定的地方(uselessPath)，防止拖慢输出速度
			          现在不会忽视一个一直有问题的lnk文件
			          打开和关闭数据库会显示时间
			（纪念一下之前一直有的多余的显示）
				Opened database successfully
				2020-06-02 10:41:07:error pid:88632：对应进程不存在（可能已经被kill了）
				2020-06-02 10:41:07:error pid:45916：对应进程不存在（可能已经被kill了）
				C:\Users\11063\AppData\Roaming\Microsoft\Windows\Recent\\くるま.lnk error: (-2147467259, '未指定的错误', None, None)
				Close database successfully
	2020-6-6
		发现：
			？：每次保存office的文件，都会产生一个新的快捷方式以及文件所在文件夹的快捷方式
			          
			          