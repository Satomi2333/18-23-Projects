注：
除了setStyleSheet函数以外，其他函数基本都是按时间书写的，新的在上

v0.0
决定了选题

v0.0.1
设计了数据库并创建之

v0.0.2
使用pyqt测试连接了数据库，并做了写入数据前的准备

v0.0.3
使用 self.initDatabase() 初始化了两个数据表，并将数据写入了数据表
生成的日志在
2019120415456.txt
20191203142345.txt
20191203170345.txt中

v0.0.4
准备了查询逻辑，为后续的查询数据做准备

v0.1
设计了基本界面，布局，以及各布局的嵌套方式

v0.1.1
绘制了布局并调整了比例，使得和设计的相近

v0.1.2
处理了和控件相关的操作，看上去还行
重写了鼠标事件（离开，进入，拖动），以及事件过滤器（单击指定控件）

v0.1.3
测试了大量的QSS，并写出了自己的一个my.qss文件，加载测试通过
但是由于只能在QWidget上设置qss，而不能在layout上设置，找到了解决办法，但是只能写在ui文件编译后的py文件中，于是打算在后期再写入

v0.1.4
整理了会用到的sql查询语句，并将界面左侧的lineEdit和comboBox相应的项目添加进去

v0.1.5
完成了界面左侧相关的槽函数和实现，使得可以生成语法正确的sql查询语句
因为查询物体会和其他查询冲突，所以只能单独查询物体

v0.2
完成了界面右边的排序方式的代码生成，并且会自动判断当前查询的表，从而修改此comboBox的项目
增加了左侧的细节，现在会自动填充数字(0.6，0)或者符号(%%)

v0.2.1
使用了另一种方式（self.initDatabase2()）来连接数据库，使得更容易获取查询语句的结果并将之保存

v0.2.2
过滤查询结果来获取关键字段
完成了右侧图片结果的显示，本来可以用qss写出类似动画效果，但是qss不支持加载外部icon，所以只能用setIcon的方式

v0.2.3
将查询结果中的待显示字段使用列表字典嵌套的方式保存，可以更好的读取查询结果

v0.2.4
添加了toolTip，可以使用鼠标悬停来显示图片的更详细信息了

v0.3
一个优秀的算法实现了翻页功能

v0.4
界面基本没有改动了，于是开始进行qss精细化处理，在主界面上添加了3个QWidget来分别应用qss，此后将不能编译ui文件
具体改动记录在了changeOfGridAndWidget.txt文件中
重新绘制了图标，历史版本可以在icons文件夹下查看

v0.5
实现了右键菜单的功能，现在可以复制，定位，打开图片了
还差一个拖动以及在子窗口中显示（目前会闪退）

v0.6
又一个优秀的算法来处理自定义语句块的撤销和重做
优化了被禁用按钮的显示

v0.6.1
修复了一个会导致不显示结果的bug

v0.6.2
单击图片可以直接打开 (使用系统默认方式) 图片
修复选择“名称，后缀”表达式时不会填充%%的问题(代码里就直接写漏了)
修复了末页(page>=2 and resultLen%5!=0)无图的地方会显示上页相同位置图片的悬停信息(toolTip)
修复了停留在结果末页(page>=2)时进行新的搜索(resultLen == 1)会闪退(数组越界)的问题